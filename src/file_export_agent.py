# file_export_agent.py
"""
File Export Agent - Stage 9
Exports generated DPR sections to individual Markdown files

Creates 21 separate .md files (one per section) in the output directory
"""
import os
from typing import Dict, Any
from datetime import datetime
from termcolor import cprint


# Section number mapping (for file naming)
SECTION_MAPPING = {
    "executive_summary": {"num": "01", "title": "Executive Summary"},
    "organization_details": {"num": "02", "title": "Organization Details"},
    "financial_plan": {"num": "03", "title": "Financial Plan"},
    "project_introduction": {"num": "04", "title": "Project Introduction & Background"},
    "cluster_profile": {"num": "05", "title": "Cluster Profile Analysis"},
    "technical_feasibility": {"num": "06", "title": "Technical Feasibility Study"},
    "market_analysis": {"num": "07", "title": "Market Analysis & Demand Assessment"},
    "implementation_schedule": {"num": "08", "title": "Implementation Schedule & Timeline"},
    "management_structure": {"num": "09", "title": "Management & Organizational Structure"},
    "economic_viability": {"num": "10", "title": "Economic & Commercial Viability"},
    "swot_analysis": {"num": "11", "title": "SWOT Analysis"},
    "risk_analysis": {"num": "12", "title": "Risk Analysis & Mitigation"},
    "environmental_impact": {"num": "13", "title": "Environmental & Social Impact Assessment"},
    "quality_assurance": {"num": "14", "title": "Quality Assurance & Standards"},
    "supply_chain": {"num": "15", "title": "Raw Material & Supply Chain Management"},
    "infrastructure": {"num": "16", "title": "Infrastructure & Utilities Requirements"},
    "legal_compliance": {"num": "17", "title": "Legal & Regulatory Compliance"},
    "human_resource": {"num": "18", "title": "Human Resource & Manpower Plan"},
    "marketing_strategy": {"num": "19", "title": "Marketing & Sales Strategy"},
    "monitoring_framework": {"num": "20", "title": "Monitoring & Evaluation Framework"},
    "annexures": {"num": "21", "title": "Annexures & Supporting Documents"}
}


def create_file_header(section_title: str, project_data: Dict[str, Any]) -> str:
    """
    Create metadata header for each file
    """
    cluster = project_data.get("cluster_type", "N/A")
    location = project_data.get("location", "N/A")
    date_generated = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    header = f"""---
DPR Section: {section_title}
Project: {cluster}
Location: {location}
Generated: {date_generated}
Format: Markdown
Generated by: DPR Automation Platform v1.0.0
---

"""
    return header


def file_export_agent(state: Dict[str, Any]) -> Dict[str, Any]:
    """
    File Export Agent - Writes all 21 DPR sections to individual files
    
    Input: state["dpr_sections"] (21 sections in memory)
    Output: 21 individual .md files in /output directory
    """
    print()
    cprint(f"{'NODE: file_export_agent':-^80}", 'cyan', attrs=['bold'])
    
    dpr_sections = state.get("dpr_sections", {})
    project_data = state.get("project_data", {})
    
    if not dpr_sections:
        print("‚ö†Ô∏è  No DPR sections available for export")
        return state
    
    # Get cluster name for directory naming
    cluster = project_data.get("cluster_type", "Unknown_Cluster")
    location = project_data.get("location", "Unknown_Location")
    
    # Clean names for directory (remove spaces, special chars)
    cluster_clean = cluster.replace(" ", "_").replace(",", "")
    location_clean = location.split(",")[0].replace(" ", "_")  # Just city name
    
    # Create output directory
    base_dir = os.path.dirname(os.path.abspath(__file__))
    output_dir = os.path.join(base_dir, "..", "output", f"{cluster_clean}_{location_clean}")
    
    # Create directory if it doesn't exist
    os.makedirs(output_dir, exist_ok=True)
    
    print(f"\nüìÅ Output Directory: {output_dir}")
    print(f"üìù Exporting {len(dpr_sections)} sections to individual files...\n")
    
    # Track export statistics
    files_created = 0
    total_size = 0
    
    # Export each section
    for section_key, section_content in dpr_sections.items():
        # Skip financial data (it's metadata, not a document section)
        if section_key == "financial":
            continue
        
        # Get section info
        section_info = SECTION_MAPPING.get(section_key)
        if not section_info:
            print(f"  ‚ö†Ô∏è  Unknown section key: {section_key}, skipping...")
            continue
        
        section_num = section_info["num"]
        section_title = section_info["title"]
        
        # Create filename
        filename = f"{section_num}_{section_key}.md"
        filepath = os.path.join(output_dir, filename)
        
        # Create file content with header
        file_header = create_file_header(section_title, project_data)
        file_content = file_header + section_content
        
        # Write to file
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(file_content)
            
            file_size = len(file_content)
            total_size += file_size
            files_created += 1
            
            print(f"  ‚úÖ {filename:<45} ({file_size:>6} bytes)")
            
        except Exception as e:
            print(f"  ‚ùå Error writing {filename}: {e}")
    
    print()
    print("="*80)
    print(f"üìä Export Summary:")
    print(f"   Files Created: {files_created}/21")
    print(f"   Total Size: {total_size:,} bytes ({total_size/1024:.1f} KB)")
    print(f"   Location: {output_dir}")
    print("="*80)
    print()
    
    # Store export info in state
    state["export_info"] = {
        "files_created": files_created,
        "output_directory": output_dir,
        "total_size_bytes": total_size,
        "timestamp": datetime.now().isoformat()
    }
    
    print(f"‚úÖ File export complete!")
    return state
